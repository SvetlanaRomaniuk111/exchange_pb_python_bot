import os
import time
from typing import Dict
from dotenv import load_dotenv
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

from src.api import PrivatBankAPI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CURRENCY_CODES: Dict[str, str] = {
    "–î–æ–ª–ª–∞—Ä üá∫üá∏": "USD",
    "–ï–≤—Ä–æ üá™üá∫": "EUR"
}


class PrivatBankBot:
    """–ö–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–∞"""
    
    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.bot = TeleBot(token)
        self.api = PrivatBankAPI()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.bot.message_handler(commands=["start"])(self.send_welcome)
        self.bot.message_handler(commands=["help"])(self.send_help)
        self.bot.message_handler(func=lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã")(self.refresh_rates)
        self.bot.message_handler(func=lambda message: message.text in CURRENCY_CODES.keys())(self.send_exchange_rate)
    
    def send_welcome(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        buttons = [KeyboardButton(currency_name) for currency_name in CURRENCY_CODES.keys()]
        markup.add(*buttons)
        markup.add(KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã"))
        
        self.bot.send_message(
            message.chat.id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –∫ –≥—Ä–∏–≤–Ω–µ (UAH):", 
            reply_markup=markup
        )
    
    def send_help(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        help_text = (
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–∞ –∫ –≥—Ä–∏–≤–Ω–µ (UAH).\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞–ª—é—Ç–∞–º–∏\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ—ë –∫—É—Ä—Å."
        )
        self.bot.send_message(message.chat.id, help_text)
    
    def refresh_rates(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        self.bot.send_message(message.chat.id, "–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤...")
        self.send_welcome(message)
    
    def send_exchange_rate(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
        currency_name = message.text
        currency_code = CURRENCY_CODES[currency_name]
        
        try:
            exchange_rates = self.api.get_exchange_rates()
            rate_info = next((rate for rate in exchange_rates if rate['ccy'] == currency_code), None)
            
            if rate_info:
                last_updated = time.strftime("%d.%m.%Y %H:%M:%S")
                buy_rate = float(rate_info['buy'])
                sell_rate = float(rate_info['sale'])
                
                response = (
                    f"üí∞ –ö—É—Ä—Å {currency_name} –≤ –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–µ:\n\n"
                    f"üîπ –ü–æ–∫—É–ø–∫–∞: {buy_rate:.2f} UAH\n"
                    f"üî∏ –ü—Ä–æ–¥–∞–∂–∞: {sell_rate:.2f} UAH\n\n"
                    f"‚è± –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                )
                self.bot.send_message(message.chat.id, response)
            else:
                self.bot.send_message(message.chat.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–µ {currency_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            self.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {str(e)}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.bot.remove_webhook()  # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        self.bot.infinity_polling(allowed_updates=None, skip_pending=True)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    try:
        bot = PrivatBankBot(TOKEN)
        bot.run()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}")